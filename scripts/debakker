#!/usr/bin/env zsh
#
# Devuan SDK - build management
#
# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

# Bakes an online iso into VMs
# To be run from the SDK's root as ./scripts/debakker

# DEBUG=1

source sdk

TRAPZERR() { }

# arguments passed via env vars
REPO=${REPO:-http://packages.devuan.org/devuan/dists}
SUITE=${SUITE:-jessie}
ARCH=${ARCH:-i386} # or amd64
INST=${INST:-netboot}
VERSION=${VERSION:-beta}


orig_url=$REPO/$SUITE/main/installer-$ARCH/current/images/$INST/mini.iso

# if arg has url
[[ $* =~ "url" ]] && {
    act "Origin url: $orig_url"
    return 0
}

# default target is virtuabox-iso
target=vbox

func "debugging"
packer_headless=true
# this works only on virtualbox-iso
keep_failed_build=false
[[ $DEBUG = 1 ]] && {
    packer_headless=false
    keep_failed_build=true
    export PACKER_LOG=1
}


func "destination dir"
dest=$R/packer/${SUITE}_${VERSION}/${ARCH}-installer-wip
[[ -r $dest ]] && {
    act "clean destination: $dest"
    rm -rf $dest }

func "calculate the guest_os type to speed up vbox"
case $ARCH in
    x86|i386) guest_os_type=Debian ;;
    x86_64|amd64) guest_os_type=Debian_64 ;;
    *) guest_os_type=Linux ;;
esac


vm_output=devuan_${SUITE}_${VERSION}_${ARCH}



post-packer() {
[[ "$target" =~ "qemu" ]] && {
    notice "Shrinking QEMU cow to fit"
    qemu_convert_args=()
    # [[ $QUIET = 1 ]] || qemu_convert_args=(-p)
    qemu-img convert -c -p -O qcow2 $dest/devuan_${SUITE}_${VERSION}_${ARCH}.qcow2 \
             $R/pub/devuan_${SUITE}_${VERSION}_${ARCH}.qcow2
}

[[ "$target" =~ "vbox" ]] && {
    func "toasting vbox"
    vagrant box list | grep "^devuan_${SUITE}_${VERSION}_${ARCH}" 1>/dev/null 2>/dev/null
    [[ $? = 0 ]] && {
        act "Removing old box: devuan_${SUITE}_${VERSION}_${ARCH}"
        vagrant box remove devuan_${SUITE}_${VERSION}_${ARCH} --provider virtualbox --force }
    notice "Adding box to local vagrant"
    vagrant box add devuan_${SUITE}_${VERSION}_${ARCH} $R/pub/devuan_${SUITE}_${VERSION}_${ARCH}.box
    notice "Mutating the VBOX into QCOW2"
    vagrant list-commands | grep '^mutate' 1>/dev/null 2>/dev/null
    [[ $? = 0 ]] || { act "installing vagrant's plugin 'mutate'"
                      sudo apt-get -y install qemu-utils libvirt-dev
                      vagrant plugin install vagrant-mutate }
    vagrant mutate devuan_${SUITE}_${VERSION}_${ARCH} --input-provider virtualbox libvirt && {
        act "Compressing the mutated QCOW2 into pub"
        qemu-img convert -c -p -O qcow2 \
                 ~/.vagrant.d/boxes/devuan_${SUITE}_${VERSION}_${ARCH}/0/libvirt/box.img \
                 $R/pub/devuan_${SUITE}_${VERSION}_${ARCH}.qcow2
        [[ $? = 0 ]] && notice "VBOX succesfully exported to QCOW2"
    }
}
}

[[ "$1" = "post" ]] && { post-packer; return $? }
###################

# check requirements

required=(xorriso packer rsync sudo vagrant)
for i in $required; do
    isfound $i || {
    error "$i is required, but is not found on this system"
    zerr }
done

if [[ -r /usr/lib/syslinux/isohdpfx.bin ]]; then
    isohdpfx=/usr/lib/syslinux/isohdpfx.bin
elif [[ -r /usr/lib/ISOLINUX/isohdpfx.bin ]]; then
    isohdpfx=/usr/lib/ISOLINUX/isohdpfx.bin
else
    error "Isolinux/Syslinux not found: isohdpfx.bin"
    zerr
fi

notice "Baking ${SUITE}_${VERSION}_${ARCH} using $INST from $REPO"

# create the iso output directory
out=$R/packer/iso/$SUITE_$ARCH_$INST
mkdir -p $out
rm -f $out/SHA256SUMS
sha256sums=$REPO/$SUITE/main/installer-$ARCH/current/images/SHA256SUMS

func "$sha256sums"

# update and check SHA256 sums
pushd $out
curl -s $sha256sums -O
orig_shasum=`awk '
/ .\/'"$INST"'\/mini.iso$/ {print $1}
' SHA256SUMS`
orig_url=$REPO/$SUITE/main/installer-$ARCH/current/images/$INST/mini.iso
act "Downloading $INST mini.iso with SHA256 sum $orig_shasum"
act "$orig_url"
curl -s $orig_url -O
local_shasum=`sha256sum mini.iso`
local_shasum=${local_shasum[(w)1]}
if [[ "$orig_shasum" = "$local_shasum" ]]; then
    notice "Succesfully downloaded, SHA256 sums match"
else
    warning "SHA256 sums mismatch, operation aborted"
    func "local: $local_shasum"
    func "orig:  $orig_shasum"
    zerr
fi
popd

# rename the mini.iso into the final iso installer filename
iso_path=$out/devuan_${SUITE}_${VERSION}_${ARCH}_netboot.iso
mv $out/mini.iso $iso_path


# preseed
seed=$R/seeds/$INST-auto
notice "Injecting preseed: $seed"
[[ -r $seed ]] || {
    error "seed not found: $seed"
    zerr }
config.section.read $seed "debian preseed"
ztmp
for i in $config_section; do
    print $i >> $ztmpfile
    func "$i"
done
preseed=$ztmpfile

# loop mount
tmploop=$R/packer/packer_cache/${vm_output}.loop
newiso=$R/packer/packer_cache/${vm_output}.new
mkdir -p $tmploop
act "performing loop mount the iso (root required)"
sudo mount -o loop $iso_path $tmploop
act "copying iso files into work directory"
sudo rm -rf $newiso
rsync -a -H --exclude=TRANS.TBL $tmploop/ $newiso
sudo umount $tmploop
rmdir $tmploop
chmod +w $newiso

initrds=`find $newiso -name initrd.gz`
for i in ${(f)initrds}; do
    act "$i - injecting preseed"
    chmod +w $i
    ztmp
    mkdir -p $ztmpfile.dir
    pushd $ztmpfile.dir
    gzip -d < $i \
        | sudo cpio --extract  --make-directories --no-absolute-filenames
    cp $preseed $ztmpfile.dir/preseed.cfg
    rm -f $i
    find . | cpio -H newc --create | gzip -9 > $i
    act "$i - succesfully injected"
    chmod -w $i
    popd
    sudo rm -rf $ztmpfile.dir
done

# update md5sums?
# md5sum `find -follow -type f` > md5sum.txt

act "Toasting the new iso"
iso_ready=$R/packer/packer_cache/${vm_output}_${INST}_auto.iso
xorriso -as mkisofs -output $iso_ready \
    -iso-level 3 -full-iso9660-filenames -r \
    -J -no-emul-boot -boot-load-size 4 \
    -isohybrid-mbr $isohdpfx -partition_offset 16 \
    -boot-info-table -b isolinux.bin -c boot.cat \
    $newiso
sha1_ready=`sha1sum $iso_ready`
sha1_ready=${sha1_ready[(w)1]}

[[ -r $iso_ready ]] || {
    error "Error creating a new iso"
    zerr }

[[ $DEBUG = 1 ]] || sudo rm -rf $newiso

ztmp
packer_target=$ztmpfile
cat <<EOF >> $packer_target
{
    "builders":
    [
EOF

###########
## BUILDERS

case $target in
    qemu*)
        cat <<EOF >> $packer_target
        {
            "type": "qemu",
            "iso_url": "file://$iso_ready",
            "iso_checksum": "$sha1_ready",
            "iso_checksum_type": "sha1",
            "output_directory": "$dest",
            "ssh_wait_timeout": "30s",
            "shutdown_command": "init 0",
            "disk_size": 8192,
            "format": "qcow2",
            "headless": $packer_headless,
            "accelerator": "kvm",
            "ssh_username": "root",
            "ssh_password": "devuan",
            "ssh_port": 22,
            "ssh_wait_timeout": "90m",
            "vm_name": "devuan_${SUITE}_${VERSION}_${ARCH}",
            "net_device": "virtio-net",
            "disk_interface": "virtio",
            "boot_command": "<enter>"
        }
EOF
        ;;

    vbox*)
        cat <<EOF >> $packer_target
        {
            "type": "virtualbox-iso",
            "iso_url": "file://$iso_ready",
            "iso_checksum": "$sha1_ready",
            "iso_checksum_type": "sha1",
            "output_directory": "$dest",
            "ssh_wait_timeout": "30s",
            "shutdown_command": "init 0",
            "guest_os_type": "$guest_os_type",
            "guest_additions_mode": "disable",
            "disk_size": 8192,
            "headless": $packer_headless,
            "ssh_username": "root",
            "ssh_password": "devuan",
            "ssh_port": 22,
            "ssh_wait_timeout": "90m",
            "vm_name": "devuan_${SUITE}_${VERSION}_${ARCH}",
            "boot_command": "<enter>"
        }
EOF
        ;;

    *)
        error "packer target unsupported: $target"
        return 1
        ;;
esac


###############
## PROVISIONERS

cat <<EOF >> $packer_target
    ]
,
    "provisioners":
    [
        {
            "type": "file",
            "source": "$R/packer/sources.list",
            "destination": "/etc/apt/sources.list"
        },
        {
            "type": "file",
            "source": "$R/packer/devuan-base",
            "destination": "/tmp/devuan-base"
        },
        {
            "type": "shell",
            "inline": "sh /tmp/devuan-base"
        }
    ]
,
EOF


##################
## POST PROCESSORS
ztmp
vagrant_template=$ztmpfile
cat <<EOF >> $vagrant_template
Vagrant.configure(2) do |config|
  config.ssh.username = "root"
  config.ssh.password = "devuan"
  config.vm.guest = :debian
end
EOF
cat <<EOF >> $packer_target
    "post-processors":
    [
        {
            "type": "vagrant",
            "only": ["virtualbox-iso"],
            "output": "$R/pub/devuan_${SUITE}_${VERSION}_${ARCH}.box",
            "vagrantfile_template": "$vagrant_template"
        }
    ]
}
EOF

# can add to post-processors
# "keep_input_artifact": true
# to keep original vmdk and ovf files

packer build $packer_target

# if succesfull, shrink and convert as needed
post-packer

# cleanup
[[ $DEBUG = 1 ]] || {
    act "cleaning up"
    rm -rf $dest
    act "publishing ${INST}_auto installer ISO"
    mv $iso_ready $R/pub/
}
