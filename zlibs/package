#!/usr/bin/env zsh

# Devuan SDK - package import management

# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

# web client command
webc="elinks -no-numbering -dump -dump-width 256"

# gnupg commands
gpg_fast="gpg2 --no-default-keyring --no-auto-check-trustdb --keyring $sdk_path/.gnupg/pubring.gpg --batch"
gpg="gpg2 --no-default-keyring --keyring $sdk_path/.gnupg/pubring.gpg --batch"

package() {

    cmd_line=(${=@})

    if [[ "$1" = "" ]]; then
        [[ "$pkg_name" = "" ]] && {
            warn "Missing arguments: package-name [version]"
            return 1
        }
    else
        pkg_name=$1
        pkg_ver=${2:-$pkg_ver}
    fi


    mkdir -p sources
    
    notice "Importing package: $pkg_name"

}


package-import() {

    package $@

    mkdir -p sources

    pkg_url=https://packages.debian.org/${release}/${pkg_name}
    web_info=`${=webc} ${pkg_url}`
    # fetch sources
    typeset -aU pkg_sources
    pkg_sources=(`print $web_info | awk '

BEGIN { found=0 }

/Download Source Package/ { found=1; next }

/Maintainer/ { exit }

{ if(found==1) {
      src=sub(/.*\*.*\[/, "", $0)
      src=sub(/\]$/, "", $src)
      print $src
  }
}

'`)
    pkg_name=${pkg_sources[1]}
    pkg_name=${pkg_name[(ws:_:)1]}

    act "Source package name: $pkg_name"

    # get first package letter
    alpha=${pkg_name[1]}

    # render url
    source_url=${mirror}/pool/${section}/${alpha}/${pkg_name}
    
    pkg_dsc=""
    pkg_debian=""
    pkg_orig=""
    # fetch sources
    for s in $pkg_sources; do
        act "Source file: $s"
        [[ -r sources/${s} ]] || {
            curl "${source_url}/$s" -o sources/$s
            [[ $? = 0 ]] || {
                warn "Error downloading: $s"
                warn "Url: ${source_url}/$s"
                return 1
            }
        }
        if [[ "$s" -regex-match ".*\.dsc$" ]]; then
            pkg_dsc=$s 
        elif [[ "$s" -regex-match ".*\.debian\..*" ]]; then
            pkg_debian=$s
        else
            pkg_orig=$s
        fi
    done    

    # calculate version from package filename
    pkg_ver=${pkg_dsc[(ws:_:)2]}
    pkg_ver=${pkg_ver[(ws:-:)1]}
    pkg_ver=${pkg_ver%*.dsc}

    # calculate destination directory from tar contents
    t=`tarcmd ${pkg_orig}`
    pkg_dest=`tar tvf$t sources/$pkg_orig | awk '
{ print $6; exit }
'`
    pkg_dest=${pkg_dest%*/}

    notice "Package version: $pkg_ver"
    act "Package destination: $pkg_dest"
    act "Package description: $pkg_dsc"
    act "Package orig source: $pkg_orig"
    [[ "$pkg_debian" = "" ]] || \
        act "Package deb  source: $pkg_debian"
}



package-verify() {

    package $@

    local _dsc
    _dsc=`cat sources/${pkg_dsc}`

    hash_map=()
    hash_dsc_256=`print - $_dsc | awk '
BEGIN { found=0 }
/^Checksums-Sha256:/ { found=1; next }
/'"$pkg_name"'/ { if(found==1) print "hash_map+=(" $3 " " $1")"; next }
{ if(found==1) exit }
'`
    eval $hash_dsc_256 # fills hash_map

    for f in ${(k)hash_map}; do
        act "Compare SHA256 checksums"
        print "SHA256 desc checksum: ${hash_map[$f]} ${f}"
        hash_tar_256=`sha256sum sources/$f | awk '{print $1}'`
        print "SHA256 file checksum: $hash_tar_256 ${f}"
        print
    done
    print - $_dsc | ${=gpg} --verify
    return $?
}

package-unpack() {

    package $@

    act "Decompressing orig source file"
    t=`tarcmd ${pkg_orig}`
    tar xf$t sources/${pkg_orig} -C sources
    [[ -d sources/${pkg_dest} ]] || {
        warn "Error guessing package destination, not found: sources/${pkg_dest}"
        return 1
    }
    [[ "$pkg_debian" = "" ]] || {
        act "Decompressing debian source file"
        tar xfJ sources/${pkg_debian} -C sources/${pkg_dest}/
        [[ $? = 0 ]] || return 1
    }

    return $?
}

# wrapper to include local gitconfig    
    

package-stage() {

    package $@

    mkdir -p stage
    [[ -d $sdk_path/stage/$pkg_name ]] && {
        staged_pkg_ver="no stamp"
        [[ -r $sdk_path/stage/$pkg_name/.devuan ]] && {
            staged_pkg_ver=`awk '/source_ver/ {print $2}' $sdk_path/stage/$pkg_name/.devuan`
        }
        notice "Already staged: $pkg_name ($staged_pkg_ver)"
        act "Remote: https://git.devuan.org/packages-base/${pkg_name}"

        [[ "$staged_pkg_ver" = "$pkg_ver" ]] || {
            notice "Creating branch for version: $pkg_ver"
            pushd $sdk_path/stage/$pkg_name
            git checkout -b v${pkg_ver}
            rsync -raX $sdk_path/sources/$pkg_dest/* \
                $sdk_path/stage/$pkg_name/
            git add .
            git commit -m "branched new version $pkg_ver"
            popd

            stamp
        }
        return 0
    }
    mkdir -p $sdk_path/stage/$pkg_name
    rsync -raX $sdk_path/sources/$pkg_dest/* \
        $sdk_path/stage/$pkg_name/
    pushd $sdk_path/stage/$pkg_name
    git init
    git add .
    git commit -m "Import from Debian $release/$section package $pkg_name-$pkg_ver"
    git remote add origin git@git.devuan.org:packages-base/${pkg_name}
    popd
    notice "Stage successfull: stage/$pkg_name"
    act "Remote: https://git.devuan.org/packages-base/${pkg_name}"


    stamp

    return 0

}

package-stamp() {

    package $@

    [[ -d $sdk_path/stage/$pkg_name ]] || {
        warn "Cannot stamp project, not staged yet"
        return 1
    }

    dst=$sdk_path/stage/$pkg_name/.devuan

    cat <<EOF > $dst
source_name: $pkg_name
source_ver: $pkg_ver
source_dir: $pkg_dest
source_dsc: $pkg_dsc
source_orig: $pkg_orig
source_debian: $pkg_debian
source_url: $source_url
begin: hash sha256
EOF
    for k in ${(k)hash_map}; do
        print "${hash_map[$k]} $k" >> $dst
    done
    cat <<EOF >> $dst
end: hash sha256
EOF
    pushd $sdk_path/stage/$pkg_name
    git add .devuan
    git commit -m "import stamp version $pkg_ver"    
    popd
}


# Old and deprecated
version-latest() {
    # scrape web search for latest package version
    # may need tweaking as we go by
    print "Querying: https://packages.debian.org/search?keywords=${pkg_name}&searchon=names&suite=${release}&section=${section}"
    ${=webc} "https://packages.debian.org/search?keywords=${pkg_name}&searchon=names&suite=${release}&section=${section}" | awk '

BEGIN { found=0 }

/Package '"$pkg_name"'/ { found=1 }

{ if(found>0) found++
  if(found==5) print $0 }

' | trim | sysread pkg_latest_ver
    # split to *: 
    pkg_latest_ver=${pkg_latest_ver[(ws@:@)1]}

    print "$pkg_name latest version is ${pkg_latest_ver}"

    version $pkg_latest_ver
}
