#!/usr/bin/env zsh

# Devuan SDK - package import management

# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

# gnupg commands
gpg_fast="gpg2 --no-default-keyring --no-auto-check-trustdb --keyring $R/.gnupg/debian-keyring.gpg"
gpg="gpg2 --no-default-keyring --keyring $R/.gnupg/debian-keyring.gpg --batch"


# provisional implementation
# scraps the website search
package-query-debian() {
    fn package-query-debian
    req=(q_name)
    reqck || return $?

    rel=${1:-$release}

    pkg_url=https://packages.debian.org/${rel}/${q_name}
    act "contacting $pkg_url"

    #### Debian website parsing
    # check latest sources
    src_files=(`curl -s $pkg_url | awk '

BEGIN { found=0 }

/Download Source Package/ { found=1; next }
{ if(found > 0) found++ }
/<li>/ {
  if(found == 4)  print $0
  if(found == 8)  print $0
  if(found == 12) print $0
}
/Maintainer/ { exit }
' | sed 's/<[^>]\+>//g ; s/\[// ; s/\]//'`)

    func "found: $src_files"

    [[ "${src_files[1]}" = "" ]] && {
        warning "Source not found for package: $q_name"
        return 1
    }

    pkg_name=$q_name
    src_name=${src_files[1]}
    src_name=${src_name[(ws:_:)1]}

    for s in $src_files; do
        act "Source: $s"
        [[ "$s" -regex-match ".*\.dsc$" ]] && {
            func "dsc: $s"
            src_ver=${s#*${src_name}_}
            src_ver=${src_ver%.dsc*}
            src_dsc=$s
            continue
        }

        [[ "$s" -regex-match ".*\.debian\..*" ]] && {
            src_debian=$s
            continue
        }

        # if not .debian. or .dsc then is an orig source
        src_orig=$s

    done
}

# at this point the src_files array contains the list of source
# filenames taken from the web: dsc orig [debian]

version() {
    fn version
    req=(src_name)
    reqck || return $?

    q_ver="$1"

    [[ "$q_ver" = "" ]] && {
        act "$src_name package version set blank"
        src_ver=""
        return 0
    }

    [[ "$q_ver" = "list" ]] && {
        #### Debian website parsing
        notice "Listing available versions for Debian package: $src_name"
        curl -s "https://packages.debian.org/search?keywords=$src_name&searchon=all&suite=all&section=all" | awk '
BEGIN { found=0 }
/resultlink/ { found=1; print $0; next }
{ if(found > 0) found++
  if(found == 4) { gsub(/<br>/,"",$0); print $0; found=0 }
}' | sed 's/<[^>]\+>//g'
        return 0
    }

    if [[ "$q_ver" = "latest" ]]; then

        package-query-debian
        for s in $src_files; do
            if [[ "$s" -regex-match ".*\.dsc$" ]]; then
                func "detected package dsc"
                act "Latest source version: $src_ver"
            fi
        done

        # TODO check on package or version not found

    else

        act "$src_name source version set to $q_ver"

        package-query-debian $q_ver


        # TODO check on package or version not found

    fi

    orig_ver=${src_ver%-*}

    RPROMPT="${repo_name:-$src_name} ${repo_ver:-$src_ver} ${chroot_arch}"
    return 0
}

get_src_dest() {
    orig_ver=${src_ver%-*}
    # calculate destination directory from tar contents
    src_dest=`tar tvf $R/sources/$src_orig | awk '
{ print $6; exit }
'`
    src_dest=${src_dest%*/}
}

package() {
    fn package

    # reset all values
    unset source_url
    unset pkg_name q_name q_ver
    unset src_name src_ver src_name src_ver orig_ver
    unset src_orig src_dsc src_debian src_dest
    unset src_files
    unset staged_ver

    [[ "$1" = "" ]] && {
        act "package name set blank"
        return 0
    }

    q_name=$1

    [[ -r $R/stage/$q_name/debian/changelog ]] && {
        src_name=$q_name
        get_staged_version
        act "source already staged at version $staged_ver"
        src_ver=$staged_ver
        orig_ver=${src_ver%-*}
        return 0
    }

    package-query-debian
    # at this point we know the src_name

    src_name=${src_name:-$q_name}
    notice "Source selected: $src_name"

    if [[ -r $R/sources/$src_dsc ]]; then
        act "source package already downloaded"
        get_src_dest
    else
        warn "source package not found, run import to download"
    fi

    [[ -r $R/stage/$src_name/debian/changelog ]] && {
        get_staged_version
        act "source already staged at version $staged_ver"
        src_ver=$staged_ver
    }

    orig_ver=${src_ver%-*}

    return 0

}


import package-import() {
    fn package-import
    req=(src_name src_ver src_files)
    reqck || return $?

    notice "Importing package: $src_name"

    # get first package letter
    alpha=${src_name[1]}

    # render url
    source_url=${mirror}/pool/${section}/${alpha}/${src_name}
    act "Downloading sources from: $source_url"

    # fetch sources
    for s in $src_files; do

        func "Source file: $s"
        if [[ -r $R/sources/${s} ]]; then
            func "file found already downloaded: sources/$s"
            func "`file sources/$s`"
        else
            curl ${source_url}/$s -o $R/sources/$s
            [[ $? = 0 ]] || {
                warn "Error downloading: $s"
                warn "Url: ${source_url}/$s"
                return 1
            }
        fi

        if [[ "$s" -regex-match ".*\.dsc$" ]]; then
            func "detected package dsc"
            file $R/sources/$s | grep -i 'text' > /dev/null
            src_dsc=$s
        elif [[ "$s" -regex-match ".*\.debian\..*" ]]; then
            func "detected package debian"
            file $R/sources/$s | grep -i 'compressed data' > /dev/null
            src_debian=$s
        else
            func "detected package orig"
            file $R/sources/$s | grep -i 'compressed data' > /dev/null
            src_orig=$s
        fi
    done

    get_src_dest

    notice "Source version:  $src_ver"
    act "Source destination: $src_dest"
    act "Package description: $src_dsc"
    act "Package orig source: $src_orig"
    [[ "$src_debian" = "" ]] || \
        act "Package deb  source: $src_debian"
}



verify package-verify() {
    fn package-verify
    req=(src_dsc)
    freq=($R/sources/$src_dsc)
    reqck || return $?

    notice "Verifying signatures for $src_name $src_ver"
    local _dsc
    _dsc=`cat $R/sources/${src_dsc}`

    hash_map=()
    hash_dsc_256=`print - $_dsc | awk '
BEGIN { found=0 }
/^Checksums-Sha256:/ { found=1; next }
/^ / { if(found==1) print "hash_map+=(" $3 " " $1")"; next }
{ if(found==1) exit }
'`
    eval $hash_dsc_256 # fills hash_map

    for f in ${(k)hash_map}; do
        act "Compare SHA256 checksums"
        print "SHA256 desc checksum: ${hash_map[$f]} ${f}"
        hash_tar_256=`sha256sum $R/sources/$f | awk '{print $1}'`
        print "SHA256 file checksum: $hash_tar_256 ${f}"
        print
    done
    print - $_dsc | ${=gpg} --verify

}

package-unpack() {
    fn package-unpack
    req=(src_orig src_dsc src_files)
    freq=($R/sources/$src_orig)
    reqck || return $?

    act "Decompressing source $src_name $src_ver"
    pushd $R/sources
    dpkg-source --no-check --skip-patches -x $src_dsc
    popd
    return 0
}

# wrapper to include local gitconfig


####################



_pkg_obsolete() {

    # just notes

    [[ "$pkg_ver" = "" ]] || {
        _dsc=(`find sources -name "$src_name*$pkg_ver*.dsc"`)
        [[ ${#_dsc} -gt 1 ]] && {
            warn "ambiguous version $pkg_ver"
            for s in $_dsc; do
                _ver=${s[(ws:_:)2]}
                _ver=${_ver[(ws:-:)1]}
                _ver=${_ver%*.dsc}
                printf "%s %s\t::\t%s\n" $margin $_ver $s
                return 1
            done
        }
        [[ "$_dsc" = "" ]] && {
            warn "$pkg_name package version $pkg_ver not found"
            return 1
        }
    }

    [[ "$pkg_ver" = "" ]] && {
        warn "package version not specified"
        srcs=(`find sources -name "$pkg_name*.dsc"`)
        if [[ ${#srcs} -gt 1 ]]; then
            act "available sources:"
            for s in $srcs; do
                _ver=${s#*${src_name}_}
                _ver=${_ver%.dsc*}
                src_dsc=$s
                _ver=${s[(ws:_:)2]}
                _ver=${_ver[(ws:-:)1]}
                _ver=${_ver%*.dsc}
                printf "%s %s\t::\t%s\n" $margin $_ver $s
                return 1
            done
        elif [[ ${#srcs} = 0 ]]; then
            warn "nothing available locally, choose a version:"
            version list
            act "use the 'version' command to select one"
            act "to simply choose the latest, use 'version latest'"
            return 0
        else
            # calculate version from package filename
            pkg_dsc=`basename $srcs`
            pkg_ver=${pkg_dsc[(ws:_:)2]}
            pkg_ver=${pkg_ver[(ws:-:)1]}
            pkg_ver=${pkg_ver%*.dsc}
            act "version guessed from the only available source: $pkg_ver"
            version $pkg_ver
        fi
    }
}

_pkg_obsolete-stamp() {

    package $@

    [[ -d $R/stage/$pkg_name ]] || {
        warn "Cannot stamp project, not staged yet"
        return 1
    }

    dst=$R/stage/$pkg_name/.devuan

    cat <<EOF > $dst
source_name: $pkg_name
source_ver: $pkg_ver
source_dir: $pkg_dest
source_dsc: $pkg_dsc
source_orig: $pkg_orig
source_debian: $pkg_debian
source_url: $source_url
begin: hash sha256
EOF
    for k in ${(k)hash_map}; do
        print "${hash_map[$k]} $k" >> $dst
    done
    cat <<EOF >> $dst
end: hash sha256
EOF
    pushd $R/stage/$pkg_name
    git add .devuan
    git commit -m "import stamp version $pkg_ver"
    popd
}
