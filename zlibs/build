#!/usr/bin/env zsh

# Devuan SDK - build management

# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

build auto-build build-auto build-force() {
    fn build
    req=(chroot_arch)
    freq=(chroot/$chroot_arch/etc/passwd)
    reqck || return $?

    pushd $sdk_path

    # realize what we want to build
    target=()
    if [[ "$1" = "all" ]]; then

        notice "Building all staged repositories"
        stages=`find stage -maxdepth 1 -type d`
        for s in ${(f)stages}; do
            # skip first directory hit by gnu find
            [[ "$s" = "stage" ]] && continue
            target+=(${s[(ws:/:)2]})
        done
        act "${#target} source packages found on stage"

    elif [[ "$1" = "" ]]; then

        [[ "$src_name" = "" ]] && {
            error "Cannot build, no package selected"
            return 1
        }
        target=($src_name)

    else

        target=($1)

    fi



    # key/value record of built heads
    typeset -A heads
    heads=()
    [[ -r $sdk_path/builds/${chroot_arch}/heads.zkv ]] && \
        zkv-load $sdk_path/builds/${chroot_arch}/heads.zkv

    for t in $target; do

        notice "Building repository: $t"
        package $t
        # check if the package is staged
        [[ -r $sdk_path/stage/$src_name/debian/changelog ]] || {
            error "$src_name package not yet staged"
            return 1
        }

        orig_ver=${src_ver%-*}
        act "upstream version: $orig_ver"
        act "package version: $src_ver"
        get_staged_githead
        act "staged git head: $staged_githead"

        # check if the current git head is already built
        built_head=${heads[${src_name}-${src_ver}]}
        act "builds git head: ${built_head}"
        [[ "$staged_githead" = "${built_head}" ]] && {
            # already build, skip
            notice "Current staged source is already built"
            if [[ "$0" = "build-force" ]]; then
                act "forcing rebuild of $src_name"
            else
                act "skipping. to force rebuild use: build-force $src_name"
                continue
            fi
        }

        # check if the build should be skipped
        [[ -r $sdk_path/stage/skip-$src_name ]] && [[ "$0" != "build-force" ]] && {
            act "staged source tagged to be skip: stage/skip-$src_name"
            act "to force build delete skip file or use: build-force $src_name"
            continue
        }

        build-clean

        build-sync

        build-deps

        build-pack-orig

        build-pack-debian

        build-start

        build-finish

        notice "$t done building"
        act "saving built git head: $staged_githead"
        heads+=(${src_name}-${src_ver} $staged_githead)
        zkv-save heads $sdk_path/builds/${chroot_arch}/heads.zkv
    done

    popd
}

build-deps() {
    fn build-deps
    req=(src_name chroot_arch)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/usr/src/${src_name}-${orig_ver})
    reqck || return $?

    notice "Installing dependencies for package $src_name in $chroot_arch"

    TRAPZERR() { }

    depline=`schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/${src_name}-${orig_ver} \
        dpkg-checkbuilddeps 2>&1 | grep 'Unmet build dependencies'`

    repo_deps=(`print ${depline##*dependencies:} | sed -e 's/([^()]*)//g' -e 's/\[[^()]*\]//g'`)

    TRAPZERR() {
        error "Error reported, operation aborted."
        return 1
    }

    act "${#repo_deps} dependencies found"
    act "$repo_deps"

    for d in $repo_deps; do

        # small test to avoid systemd deps (TODO test)
        # [[ "$d" =~ "systemd" ]] && {
        #     warn "${src_name}-${src_ver} is trying to install systemd dependency: $d"
        #     warn "blocking the build for now, please disinfect the package"
        #     return 1
        # }

        act "Installing dep: $d"
        schroot -c devuan-$chroot_arch -u root \
            -d /usr/src \
            -- apt-get --force-yes -y install $d

    done

}

build-clean() {
    fn build-clean
    req=(chroot_arch src_name src_ver orig_ver)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/etc/passwd)
    reqck || return $?

    orig_ver=${src_ver%-*}

    notice "Clean source in chroot /usr/src/$src_name-${orig_ver}"
    sudo \
        rm -rf $sdk_path/chroot/$chroot_arch/usr/src/$src_name-${orig_ver}

}

build-sync() {
    fn build-sync
    req=(chroot_arch src_name src_ver orig_ver)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/etc/passwd)
    reqck || return $?

    orig_ver=${src_ver%-*}

    act "Sync repo into chroot"

    sudo \
        mkdir -p $sdk_path/chroot/$chroot_arch/usr/src/$src_name-${orig_ver}

    sudo \
        rsync -a --exclude='.git/' \
        $sdk_path/stage/$src_name/* \
        $sdk_path/chroot/$chroot_arch/usr/src/${src_name}-${orig_ver}

}

build-pack-orig() {
    fn build-pack-orig
    req=(chroot_arch src_name src_ver)
    orig_ver=${src_ver%-*}
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/usr/src/${src_name}-${orig_ver})
    reqck || return $?

    act "Pack orig tarball in chroot"
    schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/ -- \
        tar cfJ ${src_name}_${orig_ver}.orig.tar.xz \
        ${src_name}-${orig_ver}

}

build-pack-debian() {
    fn build-pack-debian
    req=(chroot_arch src_name src_ver)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/usr/src/${src_name}-${orig_ver})
    reqck || return $?
    orig_ver=${src_ver%-*}

    act "Pack debian tarball in chroot"
    schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/${src_name}-${orig_ver} \
        -- tar cfJ ${src_name}_${src_ver}.debian.tar.xz debian
    schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/${src_name}-${orig_ver} \
        mv ${src_name}_${src_ver}.debian.tar.xz ..

}

build-start() {
    fn build-start
    req=(src_name chroot_arch orig_ver)
    orig_ver=${src_ver%-*}
    freq=(chroot/$chroot_arch/usr/src/$src_name-$orig_ver)
    reqck || return $?

    notice "Starting build of ${src_name}-${src_ver} for $chroot_arch"

    # check if its debian-installer
    if [[ "$src_name" = "debian-installer" ]]; then

        schroot -c devuan-$chroot_arch -u root \
            -d /usr/src/${src_name}-${orig_ver}/build \
            -- make reallyclean

        schroot -c devuan-$chroot_arch -u root \
            -d /usr/src/${src_name}-${orig_ver}/build \
            -- fakeroot make build_cdrom_isolinux


    else
        # launch dpkg-buildpackage in chroot
        schroot -c devuan-$chroot_arch -u root \
            -d /usr/src/${src_name}-${orig_ver} \
            -- dpkg-buildpackage -uc -us
    fi
}

# this is used internally to build first packages on host
.build-bootstrap() {
    fn build-bootstrap
    req=(chroot_arch)
    freq=(stage/debootstrap/debian stage/devuan-baseconf/debian)
    ckreq || return $?

    mkdir -p $sdk_path/bootstrap

    package $1
    mkdir -p $sdk_path/bootstrap/$src_name-${orig_ver}
    rsync -a --exclude='.git/' \
        $sdk_path/stage/$src_name/* \
        $sdk_path/bootstrap/${src_name}-${orig_ver}
    pushd $sdk_path/bootstrap
    tar cfJ ${src_name}_${orig_ver}.orig.tar.xz \
        ${src_name}-${orig_ver}
    popd
    pushd $sdk_path/bootstrap/${src_name}-${orig_ver}
    tar cfJ ${src_name}_${src_ver}.debian.tar.xz debian
    mv ${src_name}_${src_ver}.debian.tar.xz ..
    popd
    pushd $sdk_path/bootstrap/$src_name-${orig_ver}
    dpkg-buildpackage -uc -us
    popd


}

build-retry() {
    fn build-retry
    req=(src_name chroot_arch orig_ver)
    orig_ver=${src_ver%-*}
    freq=(chroot/$chroot_arch/usr/src/$src_name-$orig_ver)
    reqck || return $?

    notice "Retrying build of ${src_name}-${src_ver} for $chroot_arch"

    build-sync

    # check if its debian-installer
    [[ "$src_name" = "debian-installer" ]] && {
        error "Cannot run build-retry on debian-installer, use build"
        return 1
    }

    # -nc is no clean
    schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/${src_name}-${orig_ver} \
        -- dpkg-buildpackage -nc

}

build-finish() {

    fn build-finish
    src=chroot/$chroot_arch/usr/src
    req=(src_name chroot_arch orig_ver)
    freq=(chroot/$chroot_arch/etc/passwd)
    [[ "$src_name" = "debian-installer" ]] || {
        freq+=($src/${src_name}_${src_ver}_${chroot_arch}.changes) }
    reqck || return $?

    notice "Finishing build $src_name versioned $src_ver"

    mkdir -p $sdk_path/builds/${chroot_arch}/$src_name

    # different if building debian-installer
    [[ "$src_name" = "debian-installer" ]] && {
        mkdir -p $sdk_path/builds/${chroot_arch}/debian-installer/dest-$chroot_arch
        rsync --delete -rX \
            $sdk_path/chroot/$chroot_arch/usr/src/${src_name}-${orig_ver}/build/dest/* \
            $sdk_path/builds/${chroot_arch}/debian-installer/dest-$chroot_arch
        return 0
    }

    act "trashing old packages in builds/${chroot_arch}/$src_name"
    rm -rf $sdk_path/builds/${chroot_arch}/$src_name/*

    # all built packages
    typeset -A bld
    bld=(`cat $sdk_path/$src/$src_name-$orig_ver/debian/control | awk '
/^Package:/ { print $2 }
/^Architecture:/ { print $2 }
'`)
    act "Built packages: ${(k)bld}"
    arch=""
    for b in ${(k)bld}; do
        case ${bld[$b]} in
            all) arch=all ;;
            *) arch=$chroot_arch ;;
        esac

        # TODO
        # was XC-Package-Type
        # now replaced with Package-Type
        # ptype=`cat $sdk_path/$src/$src_name-$orig_ver/debian/control | awk '
# /Package-Type:/ { print $2 }'`

        [[ -r $sdk_path/$src/${b}_${src_ver}_${arch}.udeb ]] && {
            sudo \
                cp $sdk_path/$src/${b}_${src_ver}_${arch}.udeb \
                $sdk_path/builds/${chroot_arch}/$src_name
        }

        [[ -r $sdk_path/$src/${b}_${src_ver}_${arch}.deb ]] && {
            sudo \
                cp $sdk_path/$src/${b}_${src_ver}_${arch}.deb \
                $sdk_path/builds/${chroot_arch}/$src_name
        }

    done

    # default sources
    sudo \
        mv \
        $sdk_path/$src/${src_name}_${src_ver}.debian.tar.xz \
        $sdk_path/$src/${src_name}_${src_ver}.dsc \
        $sdk_path/$src/${src_name}_${src_ver}_${chroot_arch}.changes \
        $sdk_path/$src/${src_name}_${orig_ver}.orig.tar.xz \
        $sdk_path/builds/${chroot_arch}/$src_name

}


build-sign() {
    fn build-sign
    req=(src_name src_ver chroot_arch)
    freq=(builds/${chroot_arch}/$src_name/${src_name}_${src_ver}_${chroot_arch}.changes)
    reqck || return $?

    notice "Signing: $src_name $src_ver $chroot_arch"

    debsign $sdk_path/builds/${chroot_arch}/$src_name/${src_name}_${src_ver}_${chroot_arch}.changes

}
