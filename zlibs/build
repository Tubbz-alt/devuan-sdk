#!/usr/bin/env zsh

# Devuan SDK - build management

# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

build() {
    fn build
    req=(src_name src_ver chroot_arch)
    freq=(stage/$src_name/debian/changelog
        chroot/$chroot_arch/etc/passwd)
    reqck

    notice "Building repository: $repo_name"
    orig_ver=${src_ver%-*}
    act "upstream version: $orig_ver"
    act "package version: $src_ver"

    build-deps

    build-clean

    build-sync

    build-pack-orig

    build-pack-debian

    build-start

    build-finish

}

build-deps() {
    fn build-deps
    req=(src_name chroot_arch)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/etc/passwd)
    ckreq

    notice "Installing dependencies for package $src_name in $chroot_arch"

    repo_deps=(`awk '
func strip_deps(i) {
  out=gensub(/Build-Depends:|,|\|/,"","g")
  print out
}
BEGIN { found=0 }
/^Build-Depends:/ { found=1; strip_deps($0); next }
/^ / { if(found==1) strip_deps($0); next }
/^$/ { found=0 }
{ found=0 }
' $sdk_path/stage/$src_name/debian/control | \
 sed -e 's/([^()]*)//g' -e 's/\[[^()]*\]//g'`)

    act "${#repo_deps} dependencies found"
    act "$repo_deps"

    # gather array of installed packages
    installed=(`chdo dpkg -l  | awk '
/ii/ { print $2 }
/rc/ { print $2 }
'`)

    TRAPZERR() { }

    for d in $repo_deps; do
        act "Checking dep: $d"
        # check if dep is in installed array
        [[ "${installed[(r)$d]}" == "$d" ]] || {
            act "Installing dep: $d"
            schroot -c devuan-$chroot_arch -u root \
                -d /usr/src \
                -- apt-get --force-yes -y install $d
        }
    done
    TRAPZERR() { 
        error "Error reported, operation aborted."
        return 1
    }
}

build-clean() {
    fn build-clean
    req=(chroot_arch src_name src_ver orig_ver)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/etc/passwd)
    ckreq

    notice "Clean source in chroot /usr/src/$src_name"
    sudo \
        rm -rf $sdk_path/chroot/$chroot_arch/usr/src/$src_name
    sudo \
        mkdir -p $sdk_path/chroot/$chroot_arch/usr/src/$src_name

    orig_ver=${src_ver%-*}

    act "Sync repo into chroot"
    sudo \
        rsync -a --exclude='.git/' \
        $sdk_path/stage/$src_name/* \
        $sdk_path/chroot/$chroot_arch/usr/src/${src_name}-${orig_ver}

}

build-sync() {
    fn build-sync
    req=(chroot_arch src_name src_ver orig_ver)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/etc/passwd)
    ckreq

    orig_ver=${src_ver%-*}

    act "Sync repo into chroot"
    sudo \
        rsync -a --exclude='.git/' \
        $sdk_path/stage/$src_name/* \
        $sdk_path/chroot/$chroot_arch/usr/src/${src_name}-${orig_ver}

}

build-pack-orig() {
    fn build-pack-orig
    req=(chroot_arch src_name src_ver)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/etc/passwd)
    ckreq
    orig_ver=${src_ver%-*}


    act "Pack orig tarball in chroot"
    schroot -c devuan-$chroot_arch -u root \
        -d $sdk_path/chroot/$chroot_arch/usr/src/ -- \
        tar cfJ ${src_name}_${orig_ver}.orig.tar.xz \
        ${src_name}-${orig_ver}

}

build-pack-debian() {
    fn build-pack-debian
    req=(chroot_arch src_name src_ver)
    freq=(stage/$src_name/debian/control
        chroot/$chroot_arch/etc/passwd)
    ckreq
    orig_ver=${src_ver%-*}

    act "Pack debian tarball in chroot"
    schroot -c devuan-$chroot_arch -u root \
        -d $sdk_path/chroot/$chroot_arch/usr/src/${src_name}-${orig_ver} \
        -- tar cfJ ${src_name}_${src_ver}.debian.tar.xz debian
   schroot -c devuan-$chroot_arch -u root \
       -d $sdk_path/chroot/$chroot_arch/usr/src/${src_name}-${orig_ver} \
       mv ${src_name}_${src_ver}.debian.tar.xz ..

}

build-start() {
    fn build-start
    req=(src_name chroot_arch orig_ver)
    freq=(chroot/$chroot_arch/usr/src/$src_name-$orig_ver)
    ckreq

    notice "Starting to build $repo_name in chroot $chroot_arch"
    # launch dpkg-buildpackage in chroot
    schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/${src_name}-${orig_ver} \
        -- dpkg-buildpackage -uc -us

}

build-finish() {
    src=chroot/$chroot_arch/usr/src

    fn build-finish
    req=(src_name chroot_arch orig_ver)
    freq=(chroot/$chroot_arch/etc/passwd
    $src/${src_name}_${src_ver}_${chroot_arch}.changes)
    ckreq

    notice "Finishing build $src_name versioned $src_ver"

    mkdir -p $sdk_path/builds/$src_name

    # all built packages
    typeset -A bld
    bld=(`cat $sdk_path/$src/$src_name-$orig_ver/debian/control | awk '
/^Package:/ { print $2 }
/^Architecture:/ { print $2 }
'`)
    act "Built packages: ${(k)bld}"
    arch=""
    for b in ${(k)bld}; do
        case ${bld[$b]} in
            all) arch=all ;;
            *) arch=$chroot_arch ;;
        esac

        # TODO: contemplate more XC-Package-Type
        # note: should generally now be replaced with Package-Type
        if [[ "$b" =~ "-udeb" ]]; then
            sudo \
                mv $sdk_path/$src/${b}_${src_ver}_${arch}.udeb \
                $sdk_path/builds/$src_name
        else # generic debs
            sudo \
                mv $sdk_path/$src/${b}_${src_ver}_${arch}.deb \
                $sdk_path/builds/$src_name
        fi
    done

    # default sources
    sudo \
        mv \
        $sdk_path/$src/${src_name}_${src_ver}.debian.tar.xz \
        $sdk_path/$src/${src_name}_${src_ver}.dsc \
        $sdk_path/$src/${src_name}_${src_ver}_${chroot_arch}.changes \
        $sdk_path/$src/${src_name}_${orig_ver}.orig.tar.xz \
        $sdk_path/builds/$src_name

}


build-sign() {
    fn build-sign
    req=(src_name src_ver chroot_arch)
    freq=(builds/$src_name/${src_name}_${src_ver}_${chroot_arch}.changes)
    ckreq

    notice "Signing: $src_name $src_ver $chroot_arch"

    debsign $sdk_path/builds/$src_name/${src_name}_${src_ver}_${chroot_arch}.changes

}



# obsolete snippets

        
    #  ${caz#*\(}  ${caz%\)*}

    
_build() {

    repo_dsc_file=`find $sdk_path/sources -maxdepth 1 \
         -name "*$repo_name*" \
        | grep "$repo_ver.*dsc"`
    [[ "$repo_dsc_file" = "" ]] && {
        print "Desc file not found for $repo_name $repo_ver"
        return 1
    }
    print "Desc file: ${repo_dsc_file:t}"

    repo_dsc=`cat $repo_dsc_file`
}
