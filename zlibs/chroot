#!/usr/bin/env zsh

# Devuan SDK - chroot management

# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

vars+=(arch_include chroot_arch chroot_include chroot_shell)
vars+=(chroot_qemu chroot_device)
# chroot_qemu tells if chroot is cross-compiling and needs qemu-static

# default shell for the chroot
chroot_shell=/bin/zsh




# destructor for all open chroot sessions
chroot-destructor() {
    for _c in `schroot --list --all-sessions`; do
        sudo schroot --end-session -c $_c
    done
}
destruens+=(chroot-destructor)


function arch() {
    fn arch

    case $1 in
        i386|amd64) chroot_arch=$1 ;;
        arm*)
            arch_include=abootimg,cgpt,fake-hwclock,ntpdate,u-boot-tools
            arch_include=,vboot-utils,vboot-kernel-utils
            chroot_arch=$1
            chroot_qemu=arm # all arm except armeb
            ;;
        mips*)
            chroot_arch=$1
            chroot_qemu=$1
            ;;
        *)
            [[ "$1" = "" ]] || {
                warn "$1: chroot architecture not supported"
            }
            act -n "Existing chroots in /etc/schroot: "
            schroot -l 2>/dev/null | awk -F: '
/devuan/ {
  gsub(/devuan-/,"",$2)
  printf $2 " "
}'
            print >&2
            act "Existing chroots in $R/chroot:"
            ls $R/chroot
            return 0
            ;;
    esac

    notice "Chroot selected: $chroot_arch"
    if [[ -r $R/chroot/$chroot_arch/etc/passwd ]]; then
        act "ready for use (build or enter inside using sdk-chroot-do)"
    else
        act "no built chroot found (run sdk-chroot-build)"
    fi
}

chroot-create() {
    fn chroot-create
    req=(chroot_arch)
    reqck || return $?

    if [[ -r /etc/schroot/chroot.d/devuan-$chroot_arch ]]; then
        act "SChroot configuration found: /etc/schroot/chroot.d/devuan-$chroot_arch"
    else
        sudo mkdir -p $R/chroot/$chroot_arch

        cat <<EOF | sudo tee /etc/schroot/chroot.d/devuan-$chroot_arch
[devuan-$chroot_arch]
type=directory
directory=$R/chroot/$chroot_arch
description=Devuan SDK $chroot_arch
users=$USER
root-users=$USER
aliases=${release}-${chroot_arch}
EOF

        [[ $? = 0 ]] || {
            error "can't write new schroot conf file in /etc"
            return 1 }

        notice "Devuan schroot configuration created for arch $chroot_arch"
        func "found in: /etc/schroot/chroot.d/devuan-$chroot_arch"
    fi

    [[ "$1" = "" ]] || [[ "$1" = "first" ]] && {
        notice "First stage debootstrap"

        # chroot configuration
        chroot_include="${base_packages// /,}"
        chroot_exclude="${exclude_packages// /,}"
        chroot_variant=buildd
        chroot_comp=main


        sudo \
            debootstrap \
            --variant=$chroot_variant \
            --verbose \
            --include=$chroot_include,$arch_include \
            --exclude=$chroot_exclude \
            --components=$chroot_comp \
            --foreign --arch $chroot_arch \
            --no-check-gpg \
            $release $R/chroot/$chroot_arch $mirror
    }


    notice "Second stage debootstrap"

    # if using qemu for cross-build then copy it inside the chroot
    [[ "$chroot_qemu" = "" ]] || {
        cat /usr/bin/qemu-$chroot_qemu-static \
            | chowrite /usr/bin/qemu-$chroot_qemu-static +x }

    chdo /debootstrap/debootstrap --second-stage



    notice "Third stage debootstrap"

    cat << EOF | chowrite /etc/apt/sources.list
deb $mirror jessie main
EOF

    chdo apt-get update
    chdo apt-get install --yes --force-yes \
         --no-install-recommends ${=system_packages}

    print "devuan" | chowrite /etc/hostname
    cat << EOF | chowrite /etc/hosts
127.0.0.1       devuan    localhost
::1             localhost ip6-localhost ip6-loopback
fe00::0         ip6-localnet
ff00::0         ip6-mcastprefix
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
EOF

    cat << EOF | chowrite /etc/network/interfaces
auto lo
iface lo inet loopback
auto eth0
iface eth0 inet dhcp
EOF

    cat << EOF | chowrite /etc/resolv.conf
# ccc dns
nameserver 85.214.20.141
nameserver 213.73.91.35
EOF

    export MALLOC_CHECK_=0 # workaround for LP: #520465
    export LC_ALL=C
    export DEBIAN_FRONTEND=noninteractive

    cat << EOF | chowrite /debconf.set
console-common console-data/keymap/policy select Select keymap from full list
console-common console-data/keymap/full select en-latin1-nodeadkeys
EOF

    cat << EOF | chowrite /third-stage +x
#!$chroot_shell
dpkg-divert --add --local --divert /usr/sbin/invoke-rc.d.chroot --rename /usr/sbin/invoke-rc.d
cp /bin/true /usr/sbin/invoke-rc.d
echo -e "#!/bin/sh\nexit 101" > /usr/sbin/policy-rc.d
chmod +x /usr/sbin/policy-rc.d

debconf-set-selections /debconf.set

echo "root:devuan" | chpasswd
sed -i -e 's/KERNEL\!=\"eth\*|/KERNEL\!=\"/' /lib/udev/rules.d/75-persistent-net-generator.rules
rm -f /etc/udev/rules.d/70-persistent-net.rules
export DEBIAN_FRONTEND=noninteractive
apt-get --yes --force-yes autoremove

echo "Making the image insecure"
sed -i -e 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
update-rc.d ssh enable

rm -f /usr/sbin/policy-rc.d
rm -f /usr/sbin/invoke-rc.d
dpkg-divert --remove --rename /usr/sbin/invoke-rc.d

# rm -f /third-stage
EOF

    notice "Updating package lists in chroot"
    chdo /third-stage

    notice "Chroot succesfully created: $chroot_arch"

}

# execute a command in the chroot
chdo() {
    fn chdo $*
    req=(chroot_arch)
    reqck || return $?

    [[ "$*" = "" ]] && {
        error "missing program (and arguments) to execute in chroot"
        return 1 }

    func "$chroot_arch qemu exec: $*"
    case $chroot_arch in
        arm*)
            schroot -c devuan-$chroot_arch -s $chroot_shell \
                    -u root -d /root \
                    -- /usr/bin/qemu-$chroot_qemu-static $chroot_shell -c "$*"
        ;;

        *)
            sudo schroot -c devuan-$chroot_arch -s $chroot_shell \
                    -u root -d /root -- $*
            ;;
    esac
}

# append stdin to a file in the chroot
chappend() {
    fn chappend $*
    req=(chroot_arch)
    ckreq || return $?

    dest="$1"
    [[ -r $dest ]] || {
        error "chappend: destination file doesn't exists: $dest"
        return 1 }
    cat | suro tee -a $R/chroot/$chroot_arch/$dest >/dev/null
}

# cat stding to overwrite a file in the chroot
chowrite() {
    fn chowrite $*
    req=(chroot_arch)
    ckreq || return $?

    dest="$1"
    destdir=`dirname $1`
    [[ -r $destdir ]] || {
        error "chowrite: destination dir doesn't exists: $destdir"
        return 1 }
    sudo rm -f $R/chroot/$chroot_arch/$dest
    cat | sudo tee $R/chroot/$chroot_arch/$dest >/dev/null
    [[ "$2" = "+x" ]] && sudo chmod a+x $R/chroot/$chroot_arch/$dest
}


serve-local-repo() {
    fn serve-local-repo
    req=(chroot_arch)
    freq=($R/chroot/$chroot_arch/etc/apt/sources.list)
    reqck || return $?

    tmp=`mktemp`
    root=$R/chroot/$chroot_arch

    sudo apt-get install -y mini-httpd

    case "$1" in
        on|yes)

            # update local repository
            pushd $R/builds
            rm -f Packages.xz
            dpkg-scanpackages . | awk '
/Filename:/ { gsub(/\.\//, "", $2); print $0; next }
{ print $0 }' | xz -9 > Packages.xz
            popd

            TRAPZERR() { }
            grep "localhost:12345" \
                 $root/etc/apt/sources.list \
                 > /dev/null
            # if not already present, add to top
            [[ $? = 0 ]] || {
                cat <<EOF >> $tmp
deb http://localhost:12345/ /
EOF
                cat $root/etc/apt/sources.list >> $tmp
                sudo mv $tmp $root/etc/apt/sources.list
                chdo apt-get update
            }
            TRAPZERR() { zerr }

            mini-httpd -u $USER -p 12345 -d $R/builds

            notice "Local builds available in chroot/$chroot_arch"

            ;;
        off|no)
            cat $root/etc/apt/sources.list \
                | grep -v "localhost:12345" >> $tmp
            sudo mv $tmp $root/etc/apt/sources.list

            chdo apt-get update

            killall mini-httpd

            notice "Local builds no more available in chroot/$chroot_arch"

            ;;
        refresh|reset|reload)

            # update local repository
            pushd $R/builds
            rm -f Packages.xz
            dpkg-scanpackages . | awk '
/Filename:/ { gsub(/\.\//, "", $2); print $0; next }
{ print $0 }' | xz -9 > Packages.xz
            popd

            chdo apt-get update
            ;;
        *)
            warn "usage: serve-local-repo [ on | off | reload ]"
            ;;
    esac
    rm -f $tmp


}
