#!/usr/bin/env zsh

# Devuan SDK - iso image management

# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

seed iso() {
    fn iso
    freq=($R/seeds)
    ckreq

    seeds=`ls $R/seeds`
    sel=$1

    # check if selected iso is in preseeds
    [[ -r $R/seeds/${sel} ]] || {
        error "iso type not supported: $1"
        return 1
    }

    iso_type=$sel
    act "Selected iso type: $iso_type"
}

auto-iso() {
    fn iso
    req=(iso_type)
    ckreq || return $?

    iso-import

    iso-build-installer

    rm -f $R/iso/devuan-$release-$chroot_arch-$iso_type.packages.log
    LOG=$R/iso/devuan-$release-$chroot_arch-$iso_type.packages.log
    iso-replace-packages
    iso-seed
    LOG=""

    iso-index

    iso-make
}


iso-del-package() {
    fn iso-del-package
    req=(release chroot_arch iso_type)
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    pname=$1
    freq=($R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?

    notice "Deleting package from $release $chroot_arch $iso_type: $pname"
    chdo \
        rm -rf /$iso/pool/main/${pname[1]}/$pname/
}

iso-add-package() {
    fn iso-add-package
    req=(release chroot_arch iso_type)
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    pname=$1
    freq=($R/builds/${chroot_arch}/$pname $R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?

    notice "Adding package to $release $chroot_arch $iso_type: $pname"

    # add all packages compiled from this source
    debs=(`find $R/builds/${chroot_arch}/$pname/ -name "*${chroot_arch}*deb"`)
    debs+=(`find $R/builds/${chroot_arch}/$pname/ -name "*all*deb"`)
    for p in $debs
    do
        pb=`basename $p`
        [[ -r $p ]] && {
            sudo mkdir -p $R/chroot/$chroot_arch/$iso/pool/main/${pname[1]}/$pname/
            sudo cp $p $R/chroot/$chroot_arch/$iso/pool/main/${pname[1]}/$pname/
            act "add $pb"
        }
    done

}

# add a preseed.cfg file
iso-add-preseed() {
    fn iso-add-preseed
    req=(chroot_arch)
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    freq=($R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?


    root=$R/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type

    q_name=$1

    [[ -r $q_name ]] || {
        error "preseed file not found $q_name"
        return 1
    }


    notice "Adding preseed to $release $chroot_arch iso: $iso_type"

    # saves it in the root of the iso for consultation
    sudo cp $q_name $root/$iso/preseed.cfg

    # prepare the script to substitute initrds
    tmp=`mktemp`
    cat <<EOF >> $tmp
#!/bin/zsh

initrds=\`find /$iso -name initrd.gz\`
for i in \${(f)initrds}; do
    print "Replacing \$i"
    rm -rf /usr/src/devuan-iso/initrd-tmp
    mkdir -p /usr/src/devuan-iso/initrd-tmp
    pushd /usr/src/devuan-iso/initrd-tmp
    gzip -d < \$i | cpio --extract  --make-directories --no-absolute-filenames
    cp /$iso/preseed.cfg .
    rm -f \$i
    find . | cpio -H newc --create  | gzip -9 > \$i
    print "Replaced \$i"
    popd
    rm -rf /usr/src/devuan-iso/initrd-tmp
done
EOF
    chmod +x $tmp
    sudo mv $tmp $root/usr/src/devuan-iso/$release-$chroot_arch-preseed-script
    chdo /usr/src/devuan-iso/$release-$chroot_arch-preseed-script

    notice "Done adding preseed $iso_type"
}

# add a preseed.cfg file
iso-rm-preseed() {
    fn iso-rm-preseed
    req=(chroot_arch)
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    freq=($R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?


    root=$R/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type

    notice "Removing preseed from $release $chroot_arch iso"

    # prepare the script to substitute initrds
    tmp=`mktemp`
    cat <<EOF >> $tmp
#!/bin/zsh

initrds=\`find /$iso -name initrd.gz\`
for i in \${(f)initrds}; do
    print "Removing preseed from \$i"
    rm -rf /usr/src/devuan-iso/initrd-tmp
    mkdir -p /usr/src/devuan-iso/initrd-tmp
    pushd /usr/src/devuan-iso/initrd-tmp
    gzip -d < \$i | cpio --extract  --make-directories --no-absolute-filenames
    rm -f preseed.cfg
    rm -f \$i
    find . | cpio -H newc --create  | gzip -9 > \$i
    print "Replaced \$i"
    popd
    rm -rf /usr/src/devuan-iso/initrd-tmp
done
EOF
    chmod +x $tmp
    sudo mv $tmp $root/usr/src/devuan-iso/$release-$chroot_arch-preseed-script
    chdo /usr/src/devuan-iso/$release-$chroot_arch-preseed-script

    rm -f $iso/preseed.cfg

    notice "Done removing preseed"
}


iso-import() {
    fn iso-import
    req=(release iso_mirror chroot_arch iso_type)
    reqck || return $?

    case $iso_type in
        netinst*)
            iso_img=debian-$release-DI-rc2-$chroot_arch-netinst.iso
            ;;
        xfce*)
            iso_img=debian-$release-DI-rc2-$chroot_arch-xfce-CD-1.iso
            ;;
        *)
            error "ISO type not supported: $iso_type"
            ;;
    esac

    # TODO change with final release of Debian when ready
    debian_iso_url=$iso_mirror/$iso_img

    root=$R/chroot/$chroot_arch

    src=$root/usr/src

    sudo \
        mkdir -p $src/debian-iso/$release-$chroot_arch-$iso_type

    if [[ -r $src/debian-iso/$iso_img ]]; then
        notice "Iso image found in chroot"
        ls -lh $src/debian-iso/$iso_img
    else
        notice "Downloading Debian $iso_type iso"
        act "from: $iso_mirror"

        sudo \
            curl $debian_iso_url \
            -o $src/debian-iso/$iso_img
    fi

    notice "Importing Debian $iso_type iso"
    act "release: $release"
    act "architecture: $chroot_arch"

    sudo mkdir -p $src/devuan-iso/$release-$chroot_arch-$iso_type

    sudo mount -o loop $root/usr/src/debian-iso/$iso_img \
        $root/usr/src/debian-iso/$release-$chroot_arch-$iso_type

    sudo rsync --delete -rX $root/usr/src/debian-iso/$release-$chroot_arch-$iso_type/* \
        $root/usr/src/devuan-iso/$release-$chroot_arch-$iso_type/

    sudo umount $root/usr/src/debian-iso/$release-$chroot_arch-$iso_type

    # set the splash image in place
    sudo cp $R/pics/notoy-640x480.png \
        $root/usr/src/devuan-iso/$release-$chroot_arch-$iso_type/isolinux/splash.png

}

iso-build-installer() {
    fn iso-build-installer
    req=(chroot_arch)
    freq=()
    ckreq || return $?

    notice "Building debian-installer"
    package debian-installer

    build-check || return 0

    build-clean

    build-sync

    build-deps

    # build-start
    schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/${src_name}-${orig_ver}/build \
        -- make reallyclean

    # possible targets:
    # - build_cdrom_gtk
    # - build_cdrom-xen
    # - build_netboot
    # - build_netboot-gtk
    # - build_netboot-xen
    # - build_hd-media
    # - build_hd-media_gtk
    # - build_monolithic
    schroot -c devuan-$chroot_arch -u root \
        -d /usr/src/${src_name}-${orig_ver}/build \
        -- fakeroot make build_cdrom_isolinux \
        && { 
        # build finish

        mkdir -p $R/builds/${chroot_arch}/debian-installer/dest-$chroot_arch
        rsync --delete -rX \
            $R/chroot/$chroot_arch/usr/src/${src_name}-${orig_ver}/build/dest/* \
            $R/builds/${chroot_arch}/debian-installer/dest-$chroot_arch

        notice "$t done building"
        act "saving built git head: $staged_githead"
        heads+=(${src_name}-${src_ver} $staged_githead)
        zkv.save heads $R/builds/${chroot_arch}/heads.zkv

        build-clean

    }

    return 0
}

# takes an argument: directory storing packages to inject
# default to $R/builds
iso-replace-packages() {
    fn iso-replace-packages
    req=(release chroot_arch)
    root=$R/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    freq=($R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?

    sdir=${1:-$R/builds/$chroot_arch}

    notice "Replacing iso packages with those found in $sdir"
    act "release $release arch $chroot_arch"

    typeset -A dvn_builds
    # gather a map of builds we have locally
    sdir_f=`find $sdir -type f -name "*deb"`
    for s in ${(f)sdir_f}; do
        pname=`basename $s | file-to-name`
        # check version differences too
        # or make a pass and remove older versions
        # pver=`print $pfile | file-to-ver`
        dvn_builds+=($pname $s)
    done

    typeset -A deb_builds
    # gather a map of packages in the iso
    ddir_f=`find $root/$iso/pool -type f -name "*deb"`
    for d in ${(f)ddir_f}; do
        pname=`basename $d | file-to-name`
        deb_builds+=($pname $d)
    done

    # make sure the destination dir for our packages exists
#    sudo mkdir -p $root/$iso/pool/main/devuan

    c=0
    for deb in ${(k)deb_builds}; do
        # check if deb package is found in our builds
        [[ "$dvn_builds[$deb]" = "" ]] || {

            ours=$dvn_builds[$deb]
            ours_b=`basename $ours`
            ours_d=`dirname $ours`
            theirs=$deb_builds[$deb]
            theirs_b=`basename $theirs`
            theirs_d=`dirname $theirs`

            func "ours   $ours_b"
            func "theirs $theirs_b"
            # skip if exactly same package (already substituted)
            [[ "$ours_b" = "$theirs_b" ]] && continue

            sudo cp $ours $theirs_d
            act "add $ours_b"

            sudo rm $theirs
            act "sub $theirs_b"
            c=$(( $c + 1 ))
        }
    done
    notice "$c packages substituted"
}

iso-index iso-prepare() {
    fn iso-index
    req=(release chroot_arch)
    root=$R/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    freq=($R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?

    notice "Indexing all packages inside the iso"

    # ?? bzip2
    ztmp
    tmp=$ztmpfile
    cat <<EOF >> $tmp
Dir {
   ArchiveDir "$release-$chroot_arch-$iso_type";
   OverrideDir "indices";
   CacheDir "indices";
};

TreeDefault {
   Directory "pool/";
};

BinDirectory "pool/main" {
   Packages "dists/$release/main/debian-installer/binary-$chroot_arch/Packages";
   BinOverride "override";
#   ExtraOverride "override.extra";
};

Default {
   Packages {
       Extensions ".udeb";
   };
};
EOF
    sudo mv $tmp $root/usr/src/devuan-iso/config-udeb

    ztmp
    tmp=$ztmpfile
    cat <<EOF >> $tmp
Dir {
   ArchiveDir "$release-$chroot_arch-$iso_type";
   OverrideDir "indices";
   CacheDir "indices";
};

TreeDefault {
   Directory "pool/";
};
BinDirectory "pool/main" {
   Packages "dists/$release/main/binary-$chroot_arch/Packages";
   BinOverride "override";
#   ExtraOverride "override.extra";
};

Default {
   Packages {
       Extensions ".deb";
   };
EOF

    sudo mv $tmp $root/usr/src/devuan-iso/config-deb

    sudo mkdir -p $root/usr/src/devuan-iso/indices

    ztmp
    tmp=$ztmpfile

    # TODO
    # here we grep out systemd from the indices/override this may be a
    # bit too aggressive and it might be better to do it by hand
    chdo \
        rm -f /usr/src/devuan-iso/indices/override
    ztmp
    tmpoverride=$ztmpfile
    gunzip $R/seeds/override.$release.main.gz -c >> $tmpoverride
    sudo \
        mv $tmpoverride $root/usr/src/devuan-iso/indices/override

    schroot -c devuan-$chroot_arch \
        -u root -d /usr/src/devuan-iso -- \
        apt-ftparchive generate config-udeb

    schroot -c devuan-$chroot_arch \
        -u root -d /usr/src/devuan-iso -- \
        apt-ftparchive generate config-deb

    ztmp
    tmp=$ztmpfile
    cat <<EOF >> $tmp
APT::FTPArchive::Release::Codename "$release";
APT::FTPArchive::Release::Origin "Devuan";
APT::FTPArchive::Release::Components "main";
APT::FTPArchive::Release::Label "$iso_type";
APT::FTPArchive::Release::Architectures "$chroot_arch";
APT::FTPArchive::Release::Suite "testing";
EOF
    sudo mv $tmp $root/usr/src/devuan-iso/config-rel

    ztmp
    tmp=$ztmpfile
    schroot -c devuan-$chroot_arch \
        -u root -d /usr/src/devuan-iso -- \
        apt-ftparchive -c config-rel release \
        $release-$chroot_arch-$iso_type/dists/$release \
        >> $tmp

    sudo mv $tmp $root/$iso/dists/$release/Release

    # taken from https://wiki.debian.org/DebianInstaller/Modify/CD#Fix_md5sum.27s
    pushd $root/usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    ztmp
    tmpmd5=$ztmpfile
    sudo md5sum `find ! -name "md5sum.txt" ! -path "./isolinux/*" -follow -type f` >> $tmpmd5
    sudo mv $tmpmd5 md5sum.txt
    popd
}

iso-seed() {
    fn iso-seed
    req=(release chroot_arch)
    root=$R/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    freq=($R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?

    sudo chmod u+w $root/$iso

    notice "Planting iso with seed: $iso_type"

    # here parsing of the selected seeds file is done
    # every section is marked with a fixed string preceeded by #+
    # the zuper auxiliary function used internally is: config.section
    # to print out section contents of seed file
    # sections are:
    #+ base exclude
    #+ base include
    #+ debian preseed
    #+ package add
    #+ package remove
    # contents are found in the global array config_section

    sudo mkdir -p $root/$iso/.disk

    func "base exclude"
    config.section.read $R/seeds/$iso_type "base exclude"
    ztmp
    for i in $config_section; do
        print "$i" >> $ztmpfile
        func "del $i"
    done
    sudo mv $ztmpfile $root/$iso/.disk/base_exclude

    func "base include"
    config.section.read $R/seeds/$iso_type "base include"
    ztmp
    for i in $config_section; do
        print "$i" >> $ztmpfile
        func "add $i"
    done
    sudo mv $ztmpfile $root/$iso/.disk/base_include

    # delete packages
    func "package del"
    config.section.read $R/seeds/$iso_type "package del"
    for i in $config_section; do
        iso-del-package $i
        func "del $i"
    done

    # delete packages
    func "package add"
    config.section.read $R/seeds/$iso_type "package add"
    for i in $config_section; do
        iso-add-package $i
        func "add $i"
    done

    # inject own debian-installer if in builds
    [[ -r $R/builds/${chroot_arch}/debian-installer/dest-$chroot_arch ]] && {
        notice "Adding own build of debian-installer for $chroot_arch"
        di_path=$R/builds/${chroot_arch}/debian-installer/dest-$chroot_arch/cdrom
        case $chroot_arch in
            i386)
                sudo cp -vf \
                    $di_path/vmlinuz \
                    $root/$iso/install.386/vmlinuz
                sudo cp -vf \
                    $di_path/initrd.gz \
                    $root/$iso/install.386/initrd.gz
                sudo cp -vf \
                    $di_path/gtk/vmlinuz \
                    $root/$iso/install.386/gtk/vmlinuz
                sudo cp -vf \
                    $di_path/gtk/initrd.gz \
                    $root/$iso/install.386/gtk/initrd.gz
                ;;
            *) ;;
        esac
    }

    # inject preseed from selected seed (iso_type)
    func "debian preseed"
    config.section.read $R/seeds/$iso_type "debian preseed"
    ztmp
    for i in $config_section; do
        print "$i" >> $ztmpfile
        func "$i"
    done
    iso-add-preseed $ztmpfile

    # write the distro name, release, architecture, image type and date
    ztmp
    cat << EOF >> $ztmpfile
Devuan GNU/Linux "$release" - $chroot_arch $iso_type `date +%Y%m%d-%H:%M`
EOF
    sudo mv $ztmpfile $root/$iso/.disk/info

}

iso-make() {
    fn iso-make
    req=(chroot_arch release)
    root=$R/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-$iso_type
    freq=($R/chroot/$chroot_arch/$iso/README.html)
    reqck || return $?

    notice "Toasting $iso_type for $release $chroot_arch"

    schroot -c devuan-$chroot_arch \
        -u root -d /usr/src/devuan-iso -- \
        xorriso -as mkisofs -output devuan-$release-$chroot_arch-$iso_type.iso \
        -iso-level 3 -full-iso9660-filenames -r -J -no-emul-boot -boot-load-size 4 \
        -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -partition_offset 16 \
        -boot-info-table -b isolinux/isolinux.bin -c isolinux/boot.cat \
        ./$release-$chroot_arch-$iso_type

    # move the final iso out of the chroot
    mkdir -p $R/iso
    sudo \
        mv $root/usr/src/devuan-iso/devuan-$release-$chroot_arch-$iso_type.iso \
        $R/iso/

    # cleanup the source directory used for the iso
    sudo \
        rm -rf $root/usr/src/devuan-iso/$release-$chroot_arch-$iso_type

    pushd $R
    notice "$iso_type ISO ready for $release $chroot_arch"
    act " `ls -lh $R/iso/devuan-$release-$chroot_arch-$iso_type.iso`"
    popd
}
