#!/usr/bin/env zsh

# Devuan SDK - iso image management

# Copyright (C) 2015 Dyne.org Foundation
#
# Devuan SDK is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to: Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

auto-iso() {
    fn iso

    iso-import

    iso-replace-packages

    iso-prepare

    iso-make
}

iso-add-package() {
    fn iso-add-package
    req=(chroot_arch src_name src_ver)
    q_name=$1
    pkg=${q_name}_${src_ver}_${chroot_arch}.deb
    iso=usr/src/devuan-iso/$release-$chroot_arch-netinst
    freq=(builds/$src_name/${q_name}_${src_ver}_${chroot_arch}.deb
        chroot/$chroot_arch/$iso/README.html)
    ckreq

    act "Adding package to $release $chroot_arch iso: "

    sudo cp $sdk_path/builds/$src_name/${q_name}_${src_ver}_${chroot_arch}.deb \
        $sdk_path/chroot/$chroot_arch/$iso/pool/main/devuan

    act "${q_name}_${src_ver}_${chroot_arch}.deb"

    iso-prepare
}

# add a preseed.cfg file (should be inside $sdk_path
iso-add-preseed() {
    fn iso-add-preseed
    req=(chroot_arch)
    iso=usr/src/devuan-iso/$release-$chroot_arch-netinst
    freq=(chroot/$chroot_arch/$iso/README.html)    
    ckreq


    root=$sdk_path/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-netinst

    q_name=$1

    [[ -r $q_name ]] || {
        error "preseed file not found $q_name"
        return 1
    }


    act "Adding preseed to $release $chroot_arch iso: $q_name"

    # saves it in the root of the iso for consultation
    sudo cp $q_name $root/$iso/preseed.cfg

    # prepare the script to substitute initrds
    tmp=`mktemp`
    cat <<EOF >> $tmp
#!/bin/zsh

initrds=\`find /$iso -name initrd.gz\`
for i in \${(f)initrds}; do
    print "Replacing \$i"
    rm -rf /usr/src/devuan-iso/initrd-tmp
    mkdir -p /usr/src/devuan-iso/initrd-tmp
    pushd /usr/src/devuan-iso/initrd-tmp
    gzip -d < \$i | cpio --extract  --make-directories --no-absolute-filenames
    cp /$iso/preseed.cfg .
    rm -f \$i
    find . | cpio -H newc --create  | gzip -9 > \$i
    print "Replaced \$i"
    popd
    rm -rf /usr/src/devuan-iso/initrd-tmp
done
EOF
    chmod +x $tmp
    sudo mv $tmp $root/usr/src/devuan-iso/$release-$chroot_arch-preseed-script
    chdo /usr/src/devuan-iso/$release-$chroot_arch-preseed-script

    iso-prepare

    notice "Done adding preseed $q_name"
}
    

iso-import() {
    fn iso-import
    req=(release installer chroot_arch)
    ckreq

    notice "Downloading Debian netinst iso"
    act "$installer"
    act "$release $chroot_arch"

    # TODO change with final release of Debian when ready
    debian_iso_url=$installer/debian-$release-DI-rc1-$chroot_arch-netinst.iso

    root=$sdk_path/chroot/$chroot_arch

    src=$root/usr/src

    sudo \
        mkdir -p $src/debian-iso/$release-$chroot_arch-netinst

    sudo \
        test -r $src/debian-iso/$release-$chroot_arch-netinst.iso || {
        sudo \
            curl $debian_iso_url \
            -o $src/debian-iso/$release-$chroot_arch-netinst.iso
    }

    sudo mkdir -p $src/devuan-iso/$release-$chroot_arch-netinst

    sudo mount -o loop $root/usr/src/debian-iso/$release-$chroot_arch-netinst.iso \
        $root/usr/src/debian-iso/$release-$chroot_arch-netinst

    sudo rsync --delete -rX $root/usr/src/debian-iso/$release-$chroot_arch-netinst/* \
        $root/usr/src/devuan-iso/$release-$chroot_arch-netinst/

    sudo umount $root/usr/src/debian-iso/$release-$chroot_arch-netinst

}

# takes an argument: directory storing packages to inject
# default to $sdk_path/builds
iso-replace-packages() {
    fn iso-replace-packages
    req=(release chroot_arch)
    root=$sdk_path/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-netinst
    freq=(chroot/$chroot_arch/$iso/README.html)
    ckreq

    sdir=${1:-$sdk_path/builds}

    notice "Replacing iso packages with those found in $sdir"
    act "release $release arch $chroot_arch"
    
    typeset -A dvn_builds
    # gather a map of builds we have locally
    sdir_f=`find $sdir -type f -name "*deb"`
    for s in ${(f)sdir_f}; do
        pname=`basename $s | file-to-name`
        # check version differences too
        # or make a pass and remove older versions
        # pver=`print $pfile | file-to-ver`
        dvn_builds+=($pname $s)
    done

    typeset -A deb_builds
    # gather a map of packages in the iso
    ddir_f=`find $root/$iso/pool -type f -name "*deb"`
    for d in ${(f)ddir_f}; do
        pname=`basename $d | file-to-name`
        deb_builds+=($pname $d)
    done

    # make sure the destination dir for our packages exists
    sudo mkdir -p $root/$iso/pool/main/devuan

    c=0
    for deb in ${(k)deb_builds}; do
        # check if deb package is found in our builds
        [[ "$dvn_builds[$deb]" = "" ]] || {

            ours=$dvn_builds[$deb]
            ours_b=`basename $ours`
            theirs=$deb_builds[$deb]
            theirs_b=`basename $theirs`

            func "ours   $ours_b"
            func "theirs $theirs_b"
            # skip if exactly same package (already substituted)
            [[ "$ours_b" = "$theirs_b" ]] && continue

            sudo cp $ours $root/$iso/pool/main/devuan
            act "add $ours_b"

            sudo rm $theirs
            act "sub $theirs_b"
            c=$(( $c + 1 ))
        }
    done
    act "$c packages substituted"
}

iso-prepare() {
    fn iso-prepare
    req=(release chroot_arch)
    root=$sdk_path/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-netinst
    freq=(chroot/$chroot_arch/$iso/README.html)
    ckreq

    notice "Indexing all installer packages"

    sudo chmod u+w $root/$iso

    tmp=`mktemp`
    cat <<EOF >> $tmp
systemd
systemd-sysv
libsystemd0
EOF
    sudo mv $tmp $root/$iso/.disk/base_exclude

    tmp=`mktemp`
    cat <<EOF >> $tmp
sysvinit-core
devuan-baseconf
devuan-keyring
EOF
    sudo mv $tmp $root/$iso/.disk/base_include
    # ?? bzip2

    tmp=`mktemp`
    cat <<EOF >> $tmp
Dir {
   ArchiveDir "$release-$chroot_arch-netinst";
   OverrideDir "indices";
   CacheDir "indices";
};

TreeDefault {
   Directory "pool/";
};

BinDirectory "pool/main" {
   Packages "dists/$release/main/debian-installer/binary-$chroot_arch/Packages";
   BinOverride "override";
#   ExtraOverride "override.extra";
};

Default {
   Packages {
       Extensions ".udeb";
   };
};
EOF
    sudo mv $tmp $root/usr/src/devuan-iso/config-udeb

    tmp=`mktemp`
    cat <<EOF >> $tmp
Dir {
   ArchiveDir "$release-$chroot_arch-netinst";
   OverrideDir "indices";
   CacheDir "indices";
};

TreeDefault {
   Directory "pool/";
};
BinDirectory "pool/main" {
   Packages "dists/$release/main/binary-$chroot_arch/Packages";
   BinOverride "override";
#   ExtraOverride "override.extra";
};

Default {
   Packages {
       Extensions ".deb";
   };
EOF

    sudo mv $tmp $root/usr/src/devuan-iso/config-deb

    sudo mkdir -p $root/usr/src/devuan-iso/indices
    tmp=`mktemp`

    # TODO
    # here we grep out systemd from the indices/override this may be a
    # bit too aggressive and it might be better to do it by hand
    curl $mirror/indices/override.$release.main.gz \
        | gunzip | grep -v systemd >> $tmp
    sudo mv $tmp $root/usr/src/devuan-iso/indices/override

    schroot -c devuan-$chroot_arch \
        -u root -d $root/usr/src/devuan-iso -- \
        apt-ftparchive generate config-udeb

    schroot -c devuan-$chroot_arch \
        -u root -d $root/usr/src/devuan-iso -- \
        apt-ftparchive generate config-deb

    tmp=`mktemp`
    cat <<EOF >> $tmp
APT::FTPArchive::Release::Codename "$release";
APT::FTPArchive::Release::Origin "Devuan";
APT::FTPArchive::Release::Components "main";
APT::FTPArchive::Release::Label "Devuan";
APT::FTPArchive::Release::Architectures "$chroot_arch";
APT::FTPArchive::Release::Suite "testing";
EOF
    sudo mv $tmp $root/usr/src/devuan-iso/config-rel

    tmp=`mktemp`
    schroot -c devuan-$chroot_arch \
        -u root -d $root/usr/src/devuan-iso -- \
        apt-ftparchive -c config-rel release \
        $release-$chroot_arch-netinst/dists/$release \
        >> $tmp

    sudo mv $tmp $root/$iso/dists/$release/Release
}

iso-make() {
    fn iso-make
    req=(chroot_arch release)
    root=$sdk_path/chroot/$chroot_arch
    iso=usr/src/devuan-iso/$release-$chroot_arch-netinst
    freq=(chroot/$chroot_arch/$iso/README.html)
    ckreq

    notice "Toasting netinst for $release $chroot_arch"

    schroot -c devuan-$chroot_arch \
        -u root -d $root/usr/src/devuan-iso -- \
        genisoimage -o devuan-$release-$chroot_arch.iso \
        -r -J -no-emul-boot -boot-load-size 4 \
        -boot-info-table -b isolinux/isolinux.bin -c isolinux/boot.cat \
        ./$release-$chroot_arch-netinst

    mkdir -p $sdk_path/iso
    cp $root/usr/src/devuan-iso/devuan-$release-$chroot_arch.iso \
        $sdk_path/iso/

    pushd $sdk_path
    act "Netinst ISO ready for $release $chroot_arch"
    act " `ls -lh iso/devuan-$release-$chroot_arch.iso`"
    popd
        # xorriso -as mkisofs -r \
        # -checksum_algorithm_iso md5,sha1,sha256,sha512 \
        # -V 'Devuan $release $chroot_arch' \
        # -o $release-$chroot_arch-netinst.iso \
        # -J -isohybrid-mbr syslinux/usr/lib/ISOLINUX/isohdpfx.bin \
        # -partition_offset 16 -J -joliet-long \
        # -b isolinux/isolinux.bin -c isolinux/boot.cat \
        # -no-emul-boot -boot-load-size 4 -boot-info-table boot1 \
        # $release-$chroot_arch-netinst

}
